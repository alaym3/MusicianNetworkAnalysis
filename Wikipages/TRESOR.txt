{{Short description|Linux kernel patch which provides CPU-only based encryption to defend against cold boot attacks}}
{{third party|date=July 2014}}
'''TRESOR''' ([[recursive acronym]] for "TRESOR Runs Encryption Securely Outside RAM", and also the French word for a treasure) is a Linux kernel patch which provides CPU-only based [[encryption]] to defend against [[cold boot attack]]s on computer systems by performing encryption outside usual [[random-access memory]] (RAM). It is one of two proposed solutions for general-purpose computers (the other uses CPU cache for the same purpose<ref name="Frozen cache">The other has been called ''frozen cache''; the two are similar in using CPU based encryption key storage, but differs in that frozen cache uses [[CPU cache]] for the purpose rather than CPU registers. {{cite web|url= https://events.ccc.de/2010/12/28/frozen-cache/ |title=Crypto Talk at 27C3: FrozenCache – Mitigating cold-boot attacks for Full-Disk-Encryption software, Day 3, 23:00, Saal 2 |author=Erik Tews |work=27th [[Chaos Communication Congress]] |date=December 2010}}</ref>), was developed from its predecessor [[AESSE]], presented at [[EuroSec]] 2010 and presented at [[USENIX]] Security 2011.<ref name="tresor-usenix">{{cite paper|url= https://www1.informatik.uni-erlangen.de/filepool/projects/tresor/tresor.pdf |title=TRESOR Runs Encryption Securely Outside RAM |first1=Tilo |last1=Müller |first2=Felix C. |last2=Freiling |first3=Andreas |last3=Dewald |year=2011 |journal=Preprint }}</ref> The authors state that it allows RAM to be treated as untrusted from a security viewpoint without hindering the system.

A 2012 paper called TRESOR-HUNT showed how a [[DMA attack]] can break this system, by injecting code that would invisibly function at [[ring 0]] (the highest privilege level), which would allow it to read the keys and transfer them to usual memory. The paper also proposed ways to mitigate such attacks.<ref name="TRESORHUNT">{{cite web|url= https://old.iseclab.org/papers/acsac2012dma.pdf |title=TRESOR-HUNT: Attacking CPU-Bound Encryption |first1=Erik-Oliver |last1=Blass |first2=William |last2=Robertson |work=ACSAC 2012}}</ref>

== Motivation ==
{{unreferenced section|date=September 2012}}
In computer security, a common problem for data security is how an intruder can access [[data encryption|encrypted data]] on a computer. Modern encryption algorithms, correctly implemented and with [[password strength|strong passwords]], are often unbreakable with current technology, so emphasis has moved to techniques that bypass this requirement, by exploiting aspects of data security where the encryption can be "broken" with much less effort, or else bypassed completely.

A [[cold boot attack]] is one such means by which an intruder can defeat encryption despite system security, if they can gain physical access to the running machine. It is premised on the physical properties of the circuitry within [[Random-access memory|memory devices]] that are commonly used in computers. The concept is that when a computer system has encrypted data open, the [[Key (cryptography)|encryption key]]s themselves used to read or write that data are usually stored on a temporary basis in physical memory, in a plain readable form. (Holding these keys in "plain" form during use is hard or impossible to avoid with usual systems since the system itself must be able to access the data when instructed by the authorized user). Usually this is no benefit to an unauthorised intruder, because they cannot access or use those keys—for example due to security built into the software or system. However, if the memory devices can be accessed outside the running system without loss of contents, for example by quickly restarting the computer or removing the devices to a different device, then the current contents—including any encryption keys in use—can be plainly read and used. This can be important if the system cannot be used to view, copy or access that data—for example the system is locked, or may have [[booby trap]]s or other intrusion controls, or is needed in a guaranteed untouched form for [[forensic]] or [[evidence|evidentiary]] purposes.

Since this is a physical property of the hardware itself, and based on physical properties of memory devices, it cannot be defeated easily by pure software techniques, since all software running in memory at the point of intervention becomes accessible. As a result, any encryption software whose keys could be accessed this way is vulnerable to such attacks. Usually a cold boot attack involves cooling memory chips or quickly restarting the computer, and exploiting the fact that data is not immediately lost (or not lost if power is very quickly restored) and the data that was held at the point of intervention will be left accessible to examination.

Cold boot attacks can therefore be a means of unauthorized data theft, loss or access. Such attacks can be nullified if the encryption keys are not accessible at a hardware level to an intruder–i.e., the devices in which the keys are stored when in use are not amenable to cold boot attacks–but this is not the usual case.

== TRESOR's approach ==

TRESOR is a software approach that seeks to resolve this insecurity by storing and manipulating encryption keys almost exclusively on the [[Central processing unit|CPU]] alone, and in registers accessible at [[ring 0]] (the highest privilege level) only—the exception being the brief period of initial calculation at the start of a session. This ensures that encryption keys are almost never available via [[user space]] or following a cold boot attack. TRESOR is written as a [[kernel (operating system)|kernel]] [[software patch|patch]] that stores encryption keys in the [[x86 debug register]]s, and uses [[On-the-fly encryption|on-the-fly]] [[round key]] generation, [[atomicity (programming)|atomicity]], and blocking of usual {{mono|[[ptrace]]}} access to the debug registers for security.

TRESOR was foreshadowed by a 2010 thesis by Tilo Muller which analyzed the cold boot attack issue. He concluded that modern [[x86]] processors had two register areas where CPU-based kernel encryption was realistic: the [[Streaming SIMD Extensions|SSE]] registers which could in effect be made privileged by disabling all SSE instructions (and necessarily, any programs relying on them), and the debug registers which were much smaller but had no such issues. He left the latter for others to examine, and developed a [[proof of concept]] distribution called ''[[Paranoix]]'' based on the SSE register method.<ref>{{cite web|url= https://www1.cs.fau.de/filepool/thesis/diplomarbeit-2010-mueller.pdf |title= Cold-Boot Resistant Implementation of AES in the Linux Kernel |first=Tilo |last=Müller |date=May 2010 |work=Thesis}}</ref>

Its developers state that "running TRESOR on a 64-bit CPU that supports [[AES-NI]], there is no performance penalty compared to a generic implementation of [[Advanced Encryption Standard|AES]]",<ref>{{cite web|url= https://www1.cs.fau.de/tresor |title=TRESOR Runs Encryption Securely Outside RAM}}</ref> and run slightly faster than standard encryption despite the need for key recalculation, a result which initially surprised the authors as well.<ref name="tresor-usenix" />

== Potential vulnerabilities ==
The authors' paper notes the following:
* Although they cannot rule out CPU data leaking into RAM, they were unable to observe any case this happened during formal testing. Any such case is expected to be patchable.
* [[Superuser|Root]] access to the encryption keys via the kernel of a running system is possible using [[loadable kernel module]]s or virtual memory ({{mono|[[kmem|/dev/kmem]]}}) and physical memory ({{mono|/dev/mem}}), if compiled to support these, but otherwise appears not to be accessible in any known way on a standard running system.
* [[Advanced Configuration and Power Interface|ACPI]] sleep and low power states: - on real processors registers are reset to zero during ACPI S3 states (suspend-to-ram) and S4 (suspend-to-disk) states since the CPU is switched off for these.
* Cold boot attacks on the CPU: - on real processors registers are cleared to zero on both hardware resets and software resets ("[[Ctrl-Alt-Delete]]"). However CPU registers are currently vulnerable on [[virtual machine]]s, since they are reset during simulated hardware resets but '''not''' during software resets. The authors deem this an apparent flaw in many implementations of virtual machines, but note that virtual systems would be inherently vulnerable even if this were rectified, since all registers on a virtual machine are likely to be accessible using the host system.
* TRESOR is resistant to [[timing attack]]s and cache-based attacks by design of the [[AES instruction set|AES-NI instruction]], where the CPU supports [[AES instruction set]] extensions.<ref>The authors cite [[Intel]]: Shay Gueron, Intel Advanced Encryption Standard (AES) Instruction Set White Paper, Rev. 3.0: ''"Beyond improving performance, the AES instructions provide important security benefits. By running in data-independent time and not using tables, they help in eliminating the major timing and cache-based attacks that threaten table-based software implementations of AES."''</ref> Processors capable of handling AES extensions as of 2011 are Intel [[Nehalem (microarchitecture)#Westmere|Westmere]] and [[Sandy Bridge]] (some i3 excepted) and successors, [[AMD Bulldozer]], and certain [[VIA PadLock]] processors.
* In 2012 a paper called TRESOR-HUNT showed how a [[DMA attack]] could break this system, by injecting code that would invisibly function at [[ring 0]] (the highest privilege level), bypassing the "lockout" imposed by TRESOR, which would allow it to read the keys from the debug registers and transfer them to usual memory. The paper also proposed ways to mitigate such attacks.<ref name="TRESORHUNT" />

== See also ==
* [[Disk encryption]]
* [[Cold boot attack]]
* [[Computer security]]
* [[Secure by design]]
* [[Linux kernel]]

== References and notes ==
{{Reflist|30em}}

== External links ==
* [http://www1.informatik.uni-erlangen.de/tresor TRESOR home page]

[[Category:Cryptography]]
[[Category:Disk encryption]]
[[Category:Side-channel attacks]]
[[Category:Computer security exploits]]